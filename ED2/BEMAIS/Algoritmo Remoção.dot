graph AlgoritmoDeRemoção {
OBS;
1 -- 2;
2 -- {3 4};
3 -- 5 -- 6;
4 -- 28 -- 29;
6 -- {7 8};
7 -- 9;
8 -- 10;
10 -- {11 12};
11 -- {14 13};
13 -- 17 -- 18 -- 9;
14 -- 15 -- 16 -- 9;
12 -- 19;
19 -- {20 21};
20 -- 22 -- 23 -- 24 -- 9;
21 -- 25 -- 26 -- 27 -- 9;
29 -- {30 31};
30 -- 9;
31 -- 32;
32 -- {33 34};
33 -- {35 38};
34 -- 41;
35 -- 36 -- 37 -- 9;
38 -- 39 -- 40 -- 9;
41 -- {42 43};
42 -- 44 -- 45 -- 24;
43 -- 49;
49 -- {50 51};
50 -- 47 -- 48 -- 27;
51 -- 52 -- {53 54};
54 -- 9;
53 -- 55 -- 56 -- 57 -- 9;


1 [label="1. removeElemento(noAtual, indiceAtual, ordem)"];
2 [label="2. É folha?"];
3 [label="3. Sim"];
4 [label="4. Não"];
5 [label="5. Passa todos os elementos que estão a direita do indiceAtual
	uma casa à esquerda"];
6 [label="6. Tem no mínimo (ordem-1)/2?"];
7 [label="7. Sim"];
8 [label="8. Não"];
9 [label="9. Retorna 0"];
10 [label="10. Há algum irmão que pode emprestar para o noAtual?"];
11 [label="11. Sim"];
12 [label="12. Não"];
13 [label="13. É irmão da direita?"];
14 [label="14. É irmão da esquerda?"];
15 [label="15. Passa o último elemento do irmão para a primeira posição
	do noAtual"];
16 [label="16. Muda a hash do paiAtual"];
17 [label="17. Passa o primeiro do irmão para a última posição do noAtual"];
18 [label="18. Desloca todos os elementos do irmão 1 para a esquerda e
	atualiza o pai do irmão"];
19 [label="19. Tem irmão na direita?"];
20 [label="20. Sim"];
21 [label="21. Não"];
22 [label="22. Move as keys e offsets do irmãoAtual para o noAtual"];
23 [label="23. removeElemento(paiAtual, indiceDoPrimeiroElementoDoirmão, ordem)"];
24 [label="24. mataArvore(irmaoAtual)"];
25 [label="25. Move as hashs do noAtual para o irmaoEsquerda"];
26 [label="26. removeElemento(paiatual, indiceDoPrimeiroElementoAtual, ordem)"];
27 [label="27. mataArvore(noAtual)"];
28 [label="28. Passa os hashs e os ponteiros um à esquerda, partindo do indice
	atual (Os hashs a partir do índice - 1)"];
29 [label="29. Tem no mínimo (ordem-1)/2?"];
30 [label="30. Sim"];
31 [label="31. Não"];
32 [label="32. Algum irmão tem para emprestar?"];
33 [label="33. Sim"];
34 [label="34. Não"];
35 [label="35. É o irmão da esquerda"];
36 [label="36. Passa o último elemento do irmão para a primeira posição do atual"];
37 [label="37. Substitui elemento que chegou no pai"];
38 [label="38. É o irmão da direita"];
39 [label="39. O menor do irmao passa para a última posição do atual"];
40 [label="40. Desloca todos os elementos do irmão uma casa à esquerda
   e o primeiro elemento do irmão se torna o pai dele"];
41 [label="41. Tem irmão à direita?"];
42 [label="42. Sim"];
43 [label="43. Não"];
44 [label="44. Move keys e ponteiros do irmão da direita para o no atual"];
45 [label="45. removeElemento(paiAtual, indiceIrmaoAtual, ordem)"];
47 [label="47. Move as keys e filhos do noAtual para o irmao a esquerda.
   Arruma os pais também, e tem que passar no mínimo 1 hash e 1 ponteiro."];
48 [label="48. removeElemento(paiAtual, indiceAtual, ordem)"];
49 [label="49. Tem filho a esquerda?"];
50 [label="50. Sim"];
51 [label="51. Não"];
52 [label="52. Tem menos que um filho?"];
53 [label="53. Sim"];
54 [label="54. Não"];
55 [label="55. Filho agora é raíz"];
56 [label="56. NóAtual->quantidadeFilhos = 0"];
57 [label="57. mataArvore(noAtual(AntigaRaiz))"];
OBS [label="O índice que passa para a removeElemento é o índice
    do ponteiro do irmão"];
}

// [label=""];
